<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/bsgrid/jquery-ui.min.css")">
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/bsgrid/jquery.bs_grid.min.css")">
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/bsgrid/jquery-ui-timepicker-addon.css")" />
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/bsgrid/jquery.bs_pagination.min.css")">
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/bsgrid/jquery.jui_filter_rules.css")">
<script type="text/javascript" src="@Url.Content("~/Scripts/bsgrid/jquery-ui.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/bsgrid/jquery-ui-timepicker-addon.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/bsgrid/jquery.ui.datepicker-zh-CN.js.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/bsgrid/jquery-ui-timepicker-zh-CN.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/bsgrid/jquery.ui.touch-punch.min.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/bsgrid/jquery.bs_pagination.min.js")" charset="utf-8"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/bsgrid/jquery.jui_filter_rules.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/bsgrid/moment.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/bsgrid/jquery.bs_grid.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/bsgrid/bs_grid/en.min.js")" charset="utf-8"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/bsgrid/bs_pagination/en.min.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/bsgrid/jui_filter_rules/en.js")"></script>

<div id="list"></div>
@using System.Text;
@using Bi.Utility;
@model Bi.Web.Areas.Manage.Models.GridVM

<script>
    var gridId = $("#list");

    $(function () {
        var key = "@Server.UrlEncode(Model.PK)";
        var viewName = "@Model.ViewName";

        $(gridId).bs_grid({

            ajaxFetchDataURL: "/App/Ajax/QueryCall.ashx?PrimaryKeyCol=" + key + "&ViewName=" + viewName,

            onRowClick: function (event, data) {
                $(gridId).bs_grid('selectedRows', 'mark_selected', data.row_id);
            },
            row_primary_key: "@Model.PK",
            table_id_prefix: "bi_",
            useSortableLists: false,
            filterContainerClass: "modal fade",
            filterToolsClass: "modal-footer",
            columns: [
                @Html.Raw(Model.Cols.ToString())
            ],

            sorting: [
                @Html.Raw(Model.SortingCols.ToString())
            ],

            filterOptions: {
                filters: [
                        @foreach(string rule in Model.StringCols.ToString().Split(','))
                        {
                            <text>
                            {
                                filterName: "@rule", filterType: "text", field: "@rule", filterLabel: "@rule",
                                excluded_operators: ["in", "not_in", "begins_with", "not_begins_with", "not_contains"
                                    , "ends_with", "not_ends_with", "is_empty", "is_not_empty"
                                , "is_null", "is_not_null"],
                                filter_interface: [
                                    {
                                        filter_element: "input",
                                        filter_element_attributes: { "type": "text" }
                                    }
                                ]
                            },
                            </text>
                        }

                        @foreach (string rule in Model.NumCols.ToString().Split(','))
                        {
                            <text>
                            {
                                filterName: "@rule", filterType: "number", field: "@rule", filterLabel: "@rule",
                                excluded_operators: ["equal", "not_equal", "less", "less_or_equal", "greater", "greater_or_equal"],
                                filter_interface: [
                                    {
                                        filter_element: "input",
                                        filter_element_attributes: { type: "text" }
                                    }
                                ]
                            },
                            </text>
                        }

                        @foreach (string rule in Model.DateCols.ToString().Split(','))
                        {
                            <text>
                            {
                                filterName: "@rule", "filterType": "date", field: "@rule", filterLabel: "@rule",
                                excluded_operators: ["in", "not_in"],
                                filter_interface: [
                                    {
                                        filter_element: "input",
                                        filter_element_attributes: {
                                            type: "text",
                                            title: "Set the date and time using format: dd/mm/yyyy hh:mm:ss"
                                        },
                                        filter_widget: "datetimepicker",
                                        filter_widget_properties: {
                                            dateFormat: "yy/mm/dd",
                                            timeFormat: "HH:mm:ss",
                                            changeMonth: true,
                                            changeYear: true,
                                            showSecond: true
                                        }
                                    }
                                ],
                                validate_dateformat: ["YYYY-MM-DD HH:mm:ss"],
                                filter_value_conversion: {
                                    function_name: "local_datetime_to_UTC_timestamp",
                                    args: [
                                        { "filter_value": "yes" },
                                        { "value": "YYYY-MM-DD HH:mm:ss" }
                                    ]
                                }
                            }
                          </text>
                     }
                ]
            }
        });

        $("#btnRefresh").on("click", function () {
            $(gridId).bs_grid('displayGrid', false);
        });
    });

    function GetSelectedRowId() {
        return $(gridId).bs_grid('selectedRows', 'get_ids');
    }

    function local_datetime_to_UTC_timestamp(date_str, dateformat) {
        // avoid date overflow in user input (moment("14/14/2005", "DD/MM/YYYY") => Tue Feb 14 2006)
        if (moment(date_str, dateformat).isValid() == false) {
            throw new Error("Invalid date");
        }

        // parse date string using given dateformat and create a javascript date object
        var date = moment(date_str, dateformat).toDate();

        // use javascript getUTC* functions to conv ert to UTC
        return date.getFullYear() +
            PadDigits(date.getMonth() + 1, 2) +
            PadDigits(date.getDate(), 2) +
            PadDigits(date.getHours(), 2) +
            PadDigits(date.getMinutes(), 2) +
            PadDigits(date.getSeconds(), 2);
    }

    function PadDigits(n, totalDigits) {
        n = n.toString();
        var pd = '';
        if (totalDigits > n.length) {
            for (i = 0; i < (totalDigits - n.length) ; i++) {
                pd += '0';
            }
        }
        return pd + n.toString();
    }
</script>